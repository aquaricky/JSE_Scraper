Notes on Proper new promise usage:
Create an initial promise function
add await before this promise so it is picked up by its parent function
use return statement to pass on values across then statemenst
use resolve & reject in a then bracket to pass final data back from the initial promise to an outside var
add only one catch at the very end to catch all rejects or errors (will also catch errors in the following then statements)


you can return teh initial promise as the results of a function or assign it to a variable and return teh variable 
this initial funtion has to be asyc tho. 



Notes on Proper promise function usage: 

functions from external libraries that use promises self resolve.
the additional then functions get passed the results of the initial function 
returns from the chaining then functions are what is returned to the  top level functions await 

example:
async function sendurlrequestStatic2 (url,blockEmelent){  // initial function definition
  return await rp(url) //returning await promise function
  .then(function(html){ //the resolving then statement has 2 functions one that resolves on success
    resolve(html) //resolveing sets the return value of the promise
  },(err)=>reject(err) //and another that rejects on failure
  ).then(<function>) // additional thens can be stacked as long as they dont call resolve they wont change the returning value of the promise, note a return statement in a then simply changes the result value passed to the following then statement chained to it
  .catch((err)=> {throw new Error(err.message)}) //rejection is caught by this catch
}

=================================================================================